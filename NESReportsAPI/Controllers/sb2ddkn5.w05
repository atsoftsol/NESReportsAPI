using NESReportsBLL;
using NESReportsDTO;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;

namespace NESReportsAPI.Controllers
{
    [RoutePrefix("api/audiovideoreport")]
    public class AudioVideoReportController : ApiController
    {
        AVReportBLL avReportBLL = new AVReportBLL();

        /// <summary>
        /// State Wise Usage Summary
        /// </summary>
        /// <param name="stateCodes"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <returns></returns>
        [Route("statewiseusagesummary/{stateCodes}/{startDate}/{endDate}")]
        public IHttpActionResult GetStateWiseUsageSummary(string stateCodes, string startDate, string endDate)
        {
            try
            {
                if (stateCodes != string.Empty)
                {
                    AVReportDTO jsonData = avReportBLL.GetAvReportSummary(stateCodes, "", "", "", startDate, endDate);

                    if (jsonData != null)
                    {
                        return Ok(jsonData);
                    }
                    else
                    {
                        return Ok();
                    }
                }
                else
                {
                    return BadRequest();
                }
            }
            catch (Exception ex)
            {
                return InternalServerError(ex);
            }
        }

        /// <summary>
        /// District Wise Usage Summary
        /// </summary>
        /// <param name="stateCodes"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <returns></returns>
        [Route("districtwiseusagesummary/{stateCodes}/{districtCodes}/{startDate}/{endDate}")]
        public IHttpActionResult GetDistrictWiseUsageSummary(string stateCodes, string districtCodes, string startDate, string endDate)
        {
            try
            {
                if (!string.IsNullOrEmpty(stateCodes))
                {
                    AVReportDTO jsonData = avReportBLL.GetAvReportSummary(stateCodes, districtCodes, "", "", startDate, endDate);

                    if (jsonData != null)
                    {
                        return Ok(jsonData);
                    }
                    else
                    {
                        return Ok();
                    }
                }
                else
                {
                    return BadRequest();
                }
            }
            catch (Exception ex)
            {
                return InternalServerError(ex);
            }
        }

        /// <summary>
        /// Branch Wise Usage Summary
        /// </summary>
        /// <param name="stateCodes"></param>
        /// <param name="districtCodes"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <returns></returns>
        [Route("branchwiseusagesummary/{stateCodes}/{districtCodes}/{branchcodes}/{startDate}/{endDate}")]
        public IHttpActionResult GetBranchWiseUsageSummary(string stateCodes, string districtCodes, string branchcodes, string startDate, string endDate)
        {
            try
            {
                if (!string.IsNullOrEmpty(stateCodes) && !string.IsNullOrEmpty(districtCodes))
                {
                    AVReportDTO jsonData = avReportBLL.GetAvReportSummary(stateCodes, districtCodes, branchcodes, "", startDate, endDate);

                    if (jsonData != null)
                    {
                        return Ok(jsonData);
                    }
                    else
                    {
                        return Ok();
                    }
                }
                else
                {
                    return BadRequest();
                }
            }
            catch (Exception ex)
            {
                return InternalServerError(ex);
            }


        }

        /// <summary>
        /// Class Wise Usage Detail
        /// </summary>
        /// <param name="stateCodes"></param>
        /// <param name="districtCodes"></param>
        /// <param name="branchCodes"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <returns></returns>
        [Route("coursewiseusagesummary/{stateCodes}/{districtCodes}/{branchCodes}/{courseCode}/{startDate}/{endDate}")]
        public IHttpActionResult GetClassWiseUsageSummary(string stateCodes, string districtCodes, string branchCodes, string courseCode, string startDate, string endDate)
        {
            try
            {
                if (!string.IsNullOrEmpty(stateCodes) && !string.IsNullOrEmpty(districtCodes) && !string.IsNullOrEmpty(branchCodes) && !string.IsNullOrEmpty(courseCode))
                {
                    AVReportDTO jsonData = avReportBLL.GetAvReportSummary(stateCodes, districtCodes, branchCodes, courseCode, startDate, endDate);

                    if (jsonData != null)
                    {
                        return Ok(jsonData);
                    }
                    else
                    {
                        return Ok();
                    }
                }
                else
                {
                    return BadRequest();
                }
            }
            catch (Exception ex)
            {
                return InternalServerError(ex);
            }
        }




        /// <summary>
        /// State Wise Usage Summary
        /// </summary>
        /// <param name="stateCodes"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <returns></returns>
        [Route("statewiseusagedetail/{stateCodes}/{startDate}/{endDate}")]
        public IHttpActionResult GetStateWiseUsageDetail(int stateCodes, string startDate, string endDate)
        {
            try
            {
                if (stateCodes > 0)
                {
                    AVReportDTO jsonData = avReportBLL.GetAvReportDetails(stateCodes, 0, 0, 0, startDate, endDate);

                    if (jsonData != null)
                    {
                        return Ok(jsonData);
                    }
                    else
                    {
                        return Ok();
                    }
                }
                else
                {
                    return BadRequest();
                }
            }
            catch (Exception ex)
            {
                return InternalServerError(ex);
            }
        }

        /// <summary>
        /// District Wise Usage Summary
        /// </summary>
        /// <param name="stateCodes"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <returns></returns>
        [Route("districtwiseusagedetail/{stateCode}/{districtCode}/{startDate}/{endDate}")]
        public IHttpActionResult GetDistrictWiseUsageDetail(int stateCode, int districtCode, string startDate, string endDate)
        {
            try
            {
                if (stateCode > 0 && districtCode > 0)
                {
                    AVReportDTO jsonData = avReportBLL.GetAvReportDetails(stateCode, districtCode, 0, 0, startDate, endDate);

                    if (jsonData != null)
                    {
                        return Ok(jsonData);
                    }
                    else
                    {
                        return Ok();
                    }
                }
                else
                {
                    return BadRequest();
                }
            }
            catch (Exception ex)
            {
                return InternalServerError(ex);
            }
        }

        /// <summary>
        /// Branch Wise Usage Summary
        /// </summary>
        /// <param name="stateCodes"></param>
        /// <param name="districtCodes"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <returns></returns>
        [Route("branchwiseusagedetail/{stateCode}/{districtCode}/{branchcode}/{startDate}/{endDate}")]
        public IHttpActionResult GetBranchWiseUsageDetail(int stateCode, int districtCode, int branchcode, string startDate, string endDate)
        {
            try
            {
                if (stateCode > 0 && districtCode > 0 && branchcode > 0)
                {
                    AVReportDTO jsonData = avReportBLL.GetAvReportDetails(stateCode, districtCode, branchcode, 0, startDate, endDate);

                    if (jsonData != null)
                    {
                        return Ok(jsonData);
                    }
                    else
                    {
                        return Ok();
                    }
                }
                else
                {
                    return BadRequest();
                }
            }
            catch (Exception ex)
            {
                return InternalServerError(ex);
            }


        }

        /// <summary>
        /// Class Wise Usage Detail
        /// </summary>
        /// <param name="stateCodes"></param>
        /// <param name="districtCodes"></param>
        /// <param name="branchCodes"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <returns></returns>
        [Route("coursewiseusagedetail/{stateCode}/{districtCode}/{branchCode}/{courseCode}/{startDate}/{endDate}")]
        public IHttpActionResult GetClassWiseUsageDetail(int stateCodes, int districtCodes, int branchCodes, int courseCode, string startDate, string endDate)
        {
            try
            {
                if (stateCodes > 0 && districtCodes > 0 && branchCodes > 0 && courseCode > 0)
                {
                    AVReportDTO jsonData = avReportBLL.GetAvReportDetails(stateCodes, districtCodes, branchCodes, courseCode, startDate, endDate);

                    if (jsonData != null)
                    {
                        return Ok(jsonData);
                    }
                    else
                    {
                        return Ok();
                    }
                }
                else
                {
                    return BadRequest();
                }
            }
            catch (Exception ex)
            {
                return InternalServerError(ex);
            }
        }


    }


}
